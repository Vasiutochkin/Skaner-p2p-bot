import time
from bot.telegram_bot import send_message, delete_message
from exchanges.binance import fetch_binance
from utils.helpers import calculate_spread
from core.message_cache import is_new_offer, clear_cache
from config import FIAT, ASSET, SPREAD_THRESHOLD, CHECK_INTERVAL
from utils.logger import log

active_messages = {}  # {key: message_id} –¥–µ key = advNo:price


def format_spread(spread: float) -> str:
    """–§–æ—Ä–º–∞—Ç—É—î —Å–ø—Ä–µ–¥ –∑ –∫–æ–ª—å–æ—Ä–æ–≤–∏–º–∏ –µ–º–æ–¥–∑—ñ"""
    if spread >= SPREAD_THRESHOLD * 3:
        return f"üü¢ <b>{spread:.2f}%</b>"
    elif spread >= SPREAD_THRESHOLD * 2:
        return f"üü° <b>{spread:.2f}%</b>"
    else:
        return f"üî¥ <b>{spread:.2f}%</b>"


def orders_overlap(buy, sell) -> bool:
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –ø–µ—Ä–µ—Ç–∏–Ω–∞—é—Ç—å—Å—è –æ—Ä–¥–µ—Ä–∏ –ø–æ —Å—É–º–∞—Ö"""
    try:
        buy_min, buy_max = float(buy["min_amount"]), float(buy["max_amount"])
        sell_min, sell_max = float(sell["min_amount"]), float(sell["max_amount"])
        return not (sell_min > buy_max or buy_min > sell_max)
    except (ValueError, TypeError):
        return False


def check_binance():
    """–û—Å–Ω–æ–≤–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞—Ä–±—ñ—Ç—Ä–∞–∂—É –Ω–∞ Binance"""
    buy_offers = fetch_binance("BUY", FIAT, ASSET, limit=3)
    sell_offers = fetch_binance("SELL", FIAT, ASSET, limit=3)

    if not buy_offers or not sell_offers:
        log.warning("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤—ñ–¥ Binance")
        return

    for buy in buy_offers:
        for sell in sell_offers:
            # –¶—ñ–Ω–∞ –º–∞—î –±—É—Ç–∏ –∞–¥–µ–∫–≤–∞—Ç–Ω–∞
            if sell["price"] <= buy["price"]:
                continue

            # –°–ø—ñ–ª—å–Ω—ñ –º–µ—Ç–æ–¥–∏ –æ–ø–ª–∞—Ç–∏
            common_methods = set(buy["methods"]) & set(sell["methods"])
            if not common_methods:
                continue

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ —Å—É–º–∞—Ö
            if not orders_overlap(buy, sell):
                continue

            # –†–∞—Ö—É—î–º–æ —Å–ø—Ä–µ–¥
            spread = calculate_spread(buy["price"], sell["price"])
            log.info(
                f"Binance: BUY={buy['price']} SELL={sell['price']} "
                f"SPREAD={spread:.2f}% METHODS={', '.join(common_methods)}"
            )

            if spread >= SPREAD_THRESHOLD:
                key_buy = f"{buy['advNo']}:{buy['price']}"
                key_sell = f"{sell['advNo']}:{sell['price']}"

                msg = (
                    f"üîÑ <b>–ê—Ä–±—ñ—Ç—Ä–∞–∂ –∑–Ω–∞–π–¥–µ–Ω–æ!</b>\n"
                    f"üî¥ Binance | –ü—Ä–æ–¥–∞–≤–µ—Ü—å: <b>{sell['seller_name']}</b>\n"
                    f"   –¶—ñ–Ω–∞: {sell['price']} {sell['currency']}\n"
                    f"   –ú—ñ–Ω: {sell['min_amount']} {sell['currency']}, "
                    f"–ú–∞–∫—Å: {sell['max_amount']} {sell['currency']}\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    f"üü¢ Binance | –ü—Ä–æ–¥–∞–≤–µ—Ü—å: <b>{buy['seller_name']}</b>\n"
                    f"   –¶—ñ–Ω–∞: {buy['price']} {buy['currency']}\n"
                    f"   –ú—ñ–Ω: {buy['min_amount']} {buy['currency']}, "
                    f"–ú–∞–∫—Å: {buy['max_amount']} {buy['currency']}\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
                    f"üìà –°–ø—Ä–µ–¥: {format_spread(spread)}\n"
                    f"üí≥ –ú–µ—Ç–æ–¥: <b>{', '.join(common_methods)}</b>\n"
                )

                # –ö–Ω–æ–ø–∫–∏ –∑ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∞ –æ—Ä–¥–µ—Ä–∏ Binance
                buttons = [[
                    {
                        "text": "–í—ñ–¥–∫—Ä–∏—Ç–∏ –æ—Ä–¥–µ—Ä (SELL)",
                        "url": f"https://p2p.binance.com/advertiserDetail?advertiserNo={sell['advNo']}"
                    },
                    {
                        "text": "–í—ñ–¥–∫—Ä–∏—Ç–∏ –æ—Ä–¥–µ—Ä (BUY)",
                        "url": f"https://p2p.binance.com/advertiserDetail?advertiserNo={buy['advNo']}"
                    }
                ]]

                # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Ü–µ –Ω–æ–≤–∏–π –æ—Ñ—Ñ–µ—Ä
                if is_new_offer(key_buy) or is_new_offer(key_sell):
                    log.info("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram")
                    sent = send_message(msg, buttons=buttons)
                    if sent:
                        active_messages[key_buy] = sent["message_id"]
                        active_messages[key_sell] = sent["message_id"]

    # üîÑ –í–∏–¥–∞–ª—è—î–º–æ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    for key, msg_id in list(active_messages.items()):
        still_alive = any(
            f"{o['advNo']}:{o['price']}" == key for o in (buy_offers + sell_offers)
        )
        if not still_alive:
            log.info(f"–û—Ä–¥–µ—Ä {key} –±—ñ–ª—å—à–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π ‚Üí –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è")
            delete_message(msg_id)
            del active_messages[key]


def main():
    clear_cache()
    log.info("=== Skaner P2P Bot (Binance) —Å—Ç–∞—Ä—Ç—É—î ===")

    try:
        while True:
            check_binance()
            time.sleep(CHECK_INTERVAL)
    except KeyboardInterrupt:
        log.info("üõë –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º")
    except Exception as e:
        log.error(f"–ü–æ–º–∏–ª–∫–∞ —É —Ü–∏–∫–ª—ñ: {e}")


if __name__ == "__main__":
    main()
